<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/27/hello-world/"/>
      <url>/2021/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode</title>
      <link href="/2021/07/26/vscode/"/>
      <url>/2021/07/26/vscode/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Software Installation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB Coding style</title>
      <link href="/2021/07/17/matlab-coding-style/"/>
      <url>/2021/07/17/matlab-coding-style/</url>
      
        <content type="html"><![CDATA[<h1>MATLAB 编程风格指南</h1><p>如何写出整洁、干净、可读性高的MATLAB代码，这是一个从开始就必须认真思考的问题，干净整洁的代码风格可以帮助我们更好的维护、理解、共享，同时它也更加容易调试与修改，也伴随着更少的错误。</p><p>作为一个从事于工程领域的学生，MATLAB软件是科研生活中不可缺少的计算软件，但是由于MATLAB是面向过程的编程语言，在编写代码的过程中，有些时候为了方便而产生的变量会使整个程序变得混乱，不适当的编写代码块也使得代码的可读性变得很差，尤其是做大型计算的时候，有时候因为代码过于混乱在调用前面变量时会出现错误。所以对于一些大型的计算程序，干净整洁可读性强的代码风格是很重要的。</p><p>本文列举了一些比较通用实践效果较好的代码风格建议。<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="1-命名规则">1 命名规则</h2><h3 id="变量">变量</h3><p>变量的命名必须记录变量的用途以及意义，增加代码的可读性，以便后续对代码的维护。</p><p>在这个地方推荐<strong>CODELF</strong>，在你不知道为变量命名的时候，可以在这个网站进行搜索，可以找到适合变量的命名</p><p><strong>CODEDL</strong>：<a href="https://unbug.github.io/codelf/#root">root - CODELF (unbug.github.io)</a></p><p>其他要求：</p><ol><li><p>变量名必须以小写开头，大小写混合组合；其次可以用下划线分割复合变量名的各个部分（注意在<strong>MATLAB</strong>图例变量中下划线 _ 会被读取为下标切换）</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">linearity, credibleThreat, qualityOfLifelinearity, credible_Threat, quality_Of_Life<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>作用域较大的变量必须具有有意义的名称，作用域范围小的变量可以拥有较短的名称，比如整数的临时变量：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">i, j, k, m, n, x, y, z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>前缀<strong>n</strong>通常用来表示对象的数量，而在<strong>MATLAB</strong>中也用<strong>m</strong>表示行数，例如：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">nFiles, n_element, mRows<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将所有变量名设为单数或者复数，如果为了避免单数复数只有最后的后缀s不同而难以分辨，可以采用后缀<strong>Array</strong>来表示复数：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">points, point, pointArray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>表示单个临时变量可以以<strong>i</strong>为前缀：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">iPoint, iTable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>迭代器的临时变量应该用<strong>i，j，k</strong>命名：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">for iPoint = 1:nPoint:end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>bool</strong>变量应加上<strong>is</strong>或者<strong>not</strong>的前缀：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">isAnimal, notAnimal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>首字母缩略词，即使其通常采用大写表示，在变量命名时也该使用小写：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>避免使用关键词或者特殊名称作为变量名。</p></li></ol><p>合适的变量名称是程序可读性高的基础。</p><h3 id="常数">常数</h3><p>常数的命名比较特殊，应该遵循以下两个原则：</p><ol><li><p>命名常量应该全部使用大写字母，且使用下划线进行语义分割。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">MAX_PATH_LENGTH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>尽量使用较多的信息说明常量的意义。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">COLOR_RED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="结构体（类）">结构体（类）</h3><ol><li><p>类的名称应该用大写开头，来区别于变量。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Dense, Model<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>类的名称不应该被包含在类的成员里面。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Model.layer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="函数">函数</h3><p>函数的名称应该含有自身用途的信息。</p><ol><li><p>函数名应该全部使用小写字母。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">call, compute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>函数名必须是有意义的名字。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">plotpoint， maxlen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果函数只有一个单个的输出，可以用输出参数命名。</p></li><li><p>没有输出参数的函数应该用函数的用途进行命名。</p></li><li><p>前缀<strong>get、set</strong>通常保留用于访问后者设置对象的属性。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">getobj(), get_length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>前缀<strong>compute</strong>也常被用于函数的命名当中。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">computeweight()computespread()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>前缀<strong>find</strong>通常被用于查找类函数的命名当中。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">findmaxlength()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>前缀<strong>initialize</strong>被用于对象或者概念被建立和初始化参数时。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">initializebias<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>前缀<strong>is</strong>通常被用于<strong>bool</strong>函数。</p></li><li><p>避免出现相同的函数名称，这样在调用函数的时候会出现错误。</p></li></ol><h3 id="通用规则">通用规则</h3><ol><li>变量和常量的名称通常带有表示单复数的后缀。</li><li>避免命名中的缩写，除非是人尽皆知的缩写，后期检查不利于维护代码。</li><li>所有的命名都应该使用英文。</li></ol><h2 id="2-文件和结构">2 文件和结构</h2><p>在文件之间和文件内的代码构建十分重要，对于后期维护和理解代码有着很大的帮助，对代码的分区与排序是关键。</p><h3 id="M文件">M文件</h3><ol><li><p>模块化，编写大程序的最佳方法就是将设计好的小模块组装起来， 这样可以减少查看代码正在做什么时候的代码阅读量。长度超过两个编辑器屏幕的代码最好进行分区处理。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">%% 分区 1code%% 分区 2code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数交互清晰明确，函数通过输入和输出与其他代码进行交互， 尽量避免使用全局变量或者非常多的输入参数。</p></li><li><p>分区，所有的子函数和函数只需要解决一个问题，避免一个体量庞大的函数产生。</p></li><li><p>尽可能使用已经建立好的函数，一个函数可以由多个子函数构成，所以开发一个正确且可读性高、灵活的函数是一项重要的任务。</p></li><li><p>出现在多个<strong>M</strong>文件的代码块都应该被封装成为一个函数。</p></li><li><p>子函数，仅由一个其他函数使用的函数应作为其子函数打包在同一文件中， 这使得代码更易于理解和维护。</p></li><li><p>测试脚本，为每一个函数编写一个测试脚本。这种做法将提高代码的质量和更改版本的可靠性。</p></li></ol><h3 id="输出与输出文件">输出与输出文件</h3><ol><li>制作输入输出模块， 提高代码的可维护性。</li><li>格式化输出以方便使用。</li></ol><h2 id="3-声明">3 声明</h2><h3 id="变量和常量">变量和常量</h3><ol><li><p>除非内存限制需要，否则不应该重复使用变量， 通过确保唯一表示概念来提高代码的可读性， 从而减少因误解定义而出错的机会。</p></li><li><p>可以在同一行声明相同类型的变量， 不应该在同一行中声明不相关的变量。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">float x, y, zglobal LENGTH, MAX_POINT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>一定要在文件的开头附近注释重要变量的意义，包括输入输出参数。</p></li><li><p>在变量声明的同一行末尾可以记录变量的意义。</p><pre class="line-numbers language-matalb" data-language="matalb"><code class="language-matalb">THRESHOLD = 10;    % Maximum noise level found by experiment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="全局声明">全局声明</h3><ol><li>应该尽可能地减少使用全局变量， 代码和程序的可维护性受益于参数的传递而不是过多的使用全局变量，一些全局变量可以用持久变量persistent代替。</li><li>应尽可能减少使用全局常量，可以使用特定的M文件或者mat文件来定义常量的值，可以有效的避免无效定义。</li></ol><h3 id="循环">循环</h3><ol><li><p>循环变量应该在循环之前立即初始化，第一提高了循环的速度，第二防止循环索引出现错误。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">for i = 1:1:n:end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>应该尽量减少在循环中使用<strong>continue</strong>和<strong>break</strong>，其可能会破坏程序的结构。</p></li><li><p>在嵌套循环的结束行应该有注释，用来阐明哪些语句在哪些循环中执行了哪些任务。</p></li></ol><h3 id="条件">条件</h3><ol><li><p>应该避免复杂的条件表达式，而是使用临时的逻辑变量，更易于阅读或者调试。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">isVaild = (value &gt;= lowerLimit) &amp; (value &lt;= upperLimit);isNew = ~ismember(value, valueArray)if (isVaild &amp; isNew):end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通常的情况应该放在if部分，而异常情况一般放在<strong>if else</strong>或者<strong>else</strong>部分，这种做法主要防止异常遮挡正常的程序执行路径。</p></li><li><p>条件表达式 <strong>if 0</strong> 不应该被使用。</p></li><li><p>switch 语句应该包含其他条件，如果遗漏会导致意想不到的结果。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">switch (condition):case Astatement;case Bstatement;otherswisestatement;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>switch 变量通常为字符串，字符串在这种情况下表现得更好。</p></li></ol><h3 id="通用规则-v2">通用规则</h3><ol><li><p>首先第一个，避免神秘代码，不要写自己接下来看不懂得代码，使得代码的可维护性变得很差，如果看不懂的代码也应该及时给予注释解释其含义。</p></li><li><p>使用括号，虽然<strong>MATLAB</strong>有运算符优先级的判定，但是加上括号使得逻辑表达式更加清晰。</p></li><li><p>尽量减少在表达式中使用数字， 可更改的数字通常应命名为常量，更改常量比更改文件中所有的相关的数字文本要容易很多。</p></li><li><p>浮点数常量应该在小数点前写一个数字。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">NUMBER = 0.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>浮点数的比较大小应该慎重。</p></li></ol><h2 id="4-布局、注释、文档">4 布局、注释、文档</h2><h3 id="布局">布局</h3><p>布局的目的是帮助读者阅读理解代码， 缩进特别有助于解释结构问题。</p><ol><li><p>每个文件的代码应保持在<strong>80</strong>列左右，<strong>80</strong> 列是编辑器、终端仿真器、打印机和调试器的通用尺寸，多人共享的文件应保持在这些限制范围内。如果在程序员之间传递文件时避免了无意的换行，则可读性会提高。</p></li><li><p>行应该被点分开，一般而言，应在逗号或者空格后换行，或者运算符号后换行，新行与上一行表达式的开头对齐。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">totalSum = a + b + c + ...   d + e;fuction = (param1, param2, ...           param3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基本的缩进应使用<strong>Tab</strong>进行缩进。</p></li><li><p>一般来说一行语句只包含一个可执行语句。</p></li><li><p>简单的单个语句<strong>if</strong>、<strong>for</strong>、或<strong>while</strong>语句可以写在一行上面。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">if (condition), statement; endwhile (condition), statement; endfor i = 1:n, statement; end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="空格">空格</h3><p>空格可以使语句看上去漂亮整齐可读性高。</p><ol><li><p>在运算符号前后都使用空格。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">simpleAverage = (first + last) / 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在逗号后面可以使用空格。</p></li><li><p>一行中多个命令的分号或者逗号应跟一个空格。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">if (condition), statement; end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关键词后面可以跟上一个空格， 可以帮助辨别函数的关键词。</p></li><li><p>一个代码块内的逻辑语句应该用空行分割。</p></li><li><p>在任何地方尽量使用对齐。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">totalSum = a + b + c + ...   d + e;fuction = (param1, param2, ...           param3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="注释">注释</h3><p>注释的目的是向代码添加信息。注释的典型用途是解释用法、提供参考信息、证明决策的合理性、描述限制、提及需要的改进。经验表明，最好在编写代码的同时编写注释，而不是打算稍后添加注释。</p><ol><li>注释写的不好，代码也就不好。</li><li>注释应与代码表达的意思一致，但不仅仅是重述代码。</li><li>注释应该通俗易懂。</li><li>注释通常与所引用的语句具有相同的缩进。</li><li>函数开头的注释应该支持help和lookfor函数。</li><li>函数开头注释应该讨论对输入参数的任何特殊要求。</li><li>函数头注释应该描述任何作用。</li><li>一般来说，最后一行函数头注释应该重述函数行，这允许用户浏览帮助打印输出并查看输入和输出参数用法。</li><li>标题注释和其余注释之间应该有一个空行，这样它们就不会在响应帮助时显示出来。</li><li>所有评论应以英文书写。</li></ol><h3 id="文档">文档</h3><ol><li>README 文档，有用的文档应该包括对代码应该做什么（要求）、它如何工作（设计）、它依赖哪些功能以及它如何被其他代码使用（接口）以及它如何进行测试的可读描述.对于额外的信用，文档可以包括对替代解决方案的讨论以及扩展或维护的建议。</li><li>考虑先编写文档，一些程序员认为最好的方法是“先编码，然后回答问题”。通过经验，我们大多数人了解到开发设计然后实施它会导致更令人满意的结果。开发项目几乎从未如期完成。如果将文档和测试留到最后，它们将被缩短。首先编写文档可确保完成并可能会减少开发时间。</li><li>变化，管理和记录代码更改的专业方法是使用源代码控制工具。对于非常简单的项目，在函数文件中添加更改历史注释肯定比没有好。</li></ol><img src="/2021/07/17/matlab-coding-style/1.jpg" alt="1" style="zoom:20%;">]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown写法</title>
      <link href="/2020/10/12/markdown/"/>
      <url>/2020/10/12/markdown/</url>
      
        <content type="html"><![CDATA[<h1>Markdown 用法</h1><p>写在前面，在写blog忘记的时候可以回来看看 😄</p><p>[Toc]</p><h2 id="1-标题">1. 标题</h2><br>标题是划分文章整体结构的最好方法，整洁的标题使得文章更为整洁，标题等级越小，则字号越大<pre class="line-numbers language-none"><code class="language-none">一号标题 #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>一号标题</h1><p>一号标题主要用于整篇文章的题目</p><pre class="line-numbers language-none"><code class="language-none">二号标题 ##<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二号标题">二号标题</h2><p>正文的题目开始使用的标题大小</p><pre class="line-numbers language-none"><code class="language-none">三号标题 ###<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三号标题">三号标题</h3><pre class="line-numbers language-none"><code class="language-none">四号标题 ####<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="四号标题">四号标题</h4><pre class="line-numbers language-none"><code class="language-none">五号标题 #####<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="五号标题">五号标题</h5><pre class="line-numbers language-none"><code class="language-none">..............<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-分割线">2. 分割线</h2><h2 id="code￼6"><pre class="line-numbers language-none"><code class="language-none">---***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></h2><h2 id="3-斜体和粗体">3. 斜体和粗体</h2><pre class="line-numbers language-none"><code class="language-none">* 斜体 *** 粗体 ***** 斜体 ***~~要删除的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>斜体</em><br><strong>粗体</strong><br><em><strong>斜体+粗体</strong></em><br><s>要删除的文字</s></p><h2 id="4-引用">4. 引用</h2><pre class="line-numbers language-none"><code class="language-none">&gt;:........<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>:这是一个引用</p></blockquote><h2 id="5-表格">5. 表格</h2><p>Markdown支持有序列表和无序列表，任何表格在建立的时候，序号和内容之间都应该有一个空格</p><h3 id="5-1-无序表格">5.1 无序表格</h3><pre class="line-numbers language-none"><code class="language-none">- 列表内容+ 列表内容* 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h3 id="5-2-有序表格">5.2 有序表格</h3><pre class="line-numbers language-none"><code class="language-none">1. 列表内容2. 列表内容3. 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="5-3-列表嵌套">5.3 列表嵌套</h3><p>列表上一级与下一级之间敲三个空格</p><pre class="line-numbers language-none"><code class="language-none">* 一级无序列表内容   * 二级无序列表内容   * 二级无序列表内容   * 二级无序列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ul><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符</p><h2 id="6-表格">6. 表格</h2><pre class="line-numbers language-none"><code class="language-none">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表格确实有点麻烦😵</p><table><thead><tr><th>表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><h2 id="7-代码">7. 代码</h2><h3 id="7-1-多行代码">7.1 多行代码</h3><pre class="line-numbers language-none"><code class="language-none">```### 7.2 单行代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里是<code>xxxxlc</code></p><pre class="line-numbers language-none"><code class="language-none">`xxxxlc`## 8. 超链接### 8.1 页内跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#jump">点击跳转</a></p><pre class="line-numbers language-none"><code class="language-none">[点击跳转](#jump)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><span id="jump">跳转此处<span></span></span></p><pre class="line-numbers language-none"><code class="language-none">&lt;span id="jump"&gt;跳转此处&lt;span&gt;### 8.2 页外跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="%E8%B6%85%E9%93%BE%E6%8E%A5">超链接名</a></p><pre class="line-numbers language-none"><code class="language-none">[Github](https://github.com/)### 8.3 参考式超链接参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This is <a href="http://example.com/" title="Optional Title Here">an example</a> reference-style link.</p><pre class="line-numbers language-none"><code class="language-none">接着，在文件的任意处，你可以把这个标记的链接内容定义出来:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">### 8.4 自动链接Markdown 还支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/">https://github.com/</a></p><pre class="line-numbers language-none"><code class="language-none">&lt;https://github.com/&gt;## 9 图片### 9.1 行内式图片语法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/12/markdown/%E5%9B%BE%E7%89%87%E7%9A%84%E8%B7%AF%E5%BE%84" alt="图片的代替文字"></p><pre><code>https://www.webfx.com/tools/emoji-cheat-sheet/https://zhuanlan.zhihu.com/p/99319314![test](https://raw.githubusercontent.com/xxxxlc/image/main/picture/test.jpg)![test](https://cdn.jsdelivr.net/gh/xxxxlc/image/img/test.png)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo具体用法</title>
      <link href="/2020/10/12/hexo-ju-ti-yong-fa/"/>
      <url>/2020/10/12/hexo-ju-ti-yong-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Start !!!</title>
      <link href="/2020/07/16/start/"/>
      <url>/2020/07/16/start/</url>
      
        <content type="html"><![CDATA[<p>始于足下</p><p><img src="/2020/07/16/start/start.jpg" alt="start"></p>]]></content>
      
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
